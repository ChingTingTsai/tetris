/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/brick.js":
/*!**********************!*\
  !*** ./src/brick.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const grid = __webpack_require__(/*! ./grid */ \"./src/grid.js\")\r\nclass brick{\r\n    gridItem;\r\n    numRotate;\r\n    startX\r\n    startY\r\n    bottomCoord\r\n    \r\n    constructor(){\r\n        this.gridItem = new grid();\r\n        this.numRotate = 0;\r\n        this.startX = 0\r\n        this.startY = 0\r\n        this.bottomCoord = []\r\n    }\r\n\r\n    getX(){\r\n        return this.startX\r\n    }\r\n\r\n    getY(){\r\n        return this.startY\r\n    }\r\n\r\n    moveX(x){\r\n        this.startX += x\r\n    }\r\n\r\n    moveY(y){\r\n        this.startY += y\r\n    }\r\n\r\n    clearGrid(){\r\n        this.gridItem.resetColor()\r\n    }\r\n\r\n    getGridItem(){\r\n        return this.gridItem;\r\n    }\r\n\r\n    setNumRotate(num){\r\n        this.numRotate = num\r\n    }\r\n\r\n    getNumRotate(){\r\n        return this.numRotate\r\n    }\r\n\r\n    getBottomCoord(){\r\n        return this.bottomCoord\r\n    }\r\n    \r\n}\r\n// (x,y)\r\nclass iBrick extends brick{\r\n    constructor(){\r\n        super();\r\n        this.getGridItem()\r\n    }\r\n    getGridItem(){\r\n        this.clearGrid()\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(2, 1);\r\n            this.gridItem.colorGrid(3, 1);\r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            this.gridItem.colorGrid(1, 0);\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(1, 2);\r\n            this.gridItem.colorGrid(1, 3);\r\n        }\r\n        return this.gridItem\r\n    }\r\n    \r\n    getBottomCoord(){\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            this.bottomCoord = [[0, 2], [1, 2], [2, 2], [3,2]]\r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            this.bottomCoord = [[1, 4]]\r\n        }\r\n        return this.bottomCoord\r\n    }\r\n\r\n    getLeftCoord(){\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            this.leftCoord = [[-1, 1]]\r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            this.leftCoord = [[0, 0], [0, 1], [0,2], [0,3]]\r\n        }\r\n        return this.leftCoord\r\n    }\r\n\r\n    getRightCoord(){\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            this.rightCoord = [[4, 1]]\r\n            \r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            this.rightCoord = [[2, 0], [2, 1], [2, 2], [2, 3]]\r\n        }\r\n        return this.rightCoord\r\n    }\r\n}\r\n\r\nclass zBrick extends brick{\r\n    constructor(){\r\n        super();\r\n        this.getGridItem()\r\n    }\r\n    getGridItem(){\r\n        this.clearGrid()\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            \r\n            this.gridItem.colorGrid(0, 0);\r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(1, 2);\r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            \r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(1, 0);\r\n            this.gridItem.colorGrid(2, 0);\r\n        }\r\n        return this.gridItem\r\n    }\r\n\r\n    getBottomCoord(){\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            this.bottomCoord = [[0,2], [1,3]]\r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            this.bottomCoord = [[0, 2], [1, 2], [2, 1]]\r\n        }\r\n        return this.bottomCoord\r\n    }\r\n\r\n    getLeftCoord(){\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            this.leftCoord = [[-1, 0], [-1, 1], [1, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            this.leftCoord = [[0, 0], [-1, 1]]\r\n        }\r\n        return this.leftCoord\r\n    }\r\n\r\n    getRightCoord(){\r\n        if(this.numRotate % 4 == 0 || this.numRotate % 4 == 2){\r\n            this.rightCoord = [[1, 0], [2, 1], [2, 2]]\r\n            \r\n        }\r\n        else if(this.numRotate % 4 == 1 || this.numRotate % 4 == 3){\r\n            this.rightCoord = [[3, 0], [2, 1]]\r\n        }\r\n        return this.rightCoord\r\n    }\r\n}\r\n\r\nclass lBrick extends brick{\r\n    constructor(){\r\n        super();\r\n        this.getGridItem()\r\n    }\r\n    getGridItem(){\r\n        this.clearGrid()\r\n        if(this.numRotate % 4 == 0){\r\n            this.gridItem.colorGrid(0, 0);\r\n            this.gridItem.colorGrid(1, 0);\r\n            this.gridItem.colorGrid(2, 0);\r\n            this.gridItem.colorGrid(2, 1);\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.gridItem.colorGrid(2, 0);\r\n            this.gridItem.colorGrid(2, 1);\r\n            this.gridItem.colorGrid(2, 2);\r\n            this.gridItem.colorGrid(1, 2);\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(0, 2);\r\n            this.gridItem.colorGrid(1, 2);\r\n            this.gridItem.colorGrid(2, 2);\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.gridItem.colorGrid(0, 0);\r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(1, 0);\r\n            this.gridItem.colorGrid(0, 2);\r\n        }\r\n        return this.gridItem\r\n    }\r\n\r\n    getBottomCoord(){\r\n        if(this.numRotate % 4 == 0){\r\n            this.bottomCoord = [[0,1], [1,1], [2,2]]\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.bottomCoord = [[1, 3], [2,3]]\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.bottomCoord = [[0,3], [1,3], [2,3]]\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.bottomCoord = [[0,3], [1, 1]]\r\n        }\r\n        return this.bottomCoord\r\n    }\r\n\r\n    getLeftCoord(){\r\n        if(this.numRotate % 4 == 0){\r\n            this.leftCoord = [[-1, 0], [1, -1]]\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.leftCoord = [[0, 2], [1, 0], [1, 1]]\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.leftCoord = [[-1, 1], [-1, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.leftCoord = [[-1, 0], [-1, 1], [-1, 2]]\r\n        }\r\n        return this.leftCoord\r\n    }\r\n\r\n    getRightCoord(){\r\n        if(this.numRotate % 4 == 0){\r\n            this.rightCoord = [[3, 0], [3, 1]]\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.rightCoord = [[3, 0], [3, 1], [3, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.rightCoord = [[1, 1], [3, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.rightCoord = [[2, 0], [1, 1], [1, 2]]\r\n        }\r\n        return this.rightCoord\r\n    }\r\n}\r\n\r\nclass tBrick extends brick{\r\n    constructor(){\r\n        super();\r\n        this.getGridItem()\r\n    }\r\n    getGridItem(){\r\n        this.clearGrid()\r\n        if(this.numRotate % 4 == 0){\r\n            this.gridItem.colorGrid(1, 0);\r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(1, 2);\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.gridItem.colorGrid(1, 0);\r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(2, 1);\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(1, 2);\r\n            this.gridItem.colorGrid(1, 0);\r\n            this.gridItem.colorGrid(2, 1);\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.gridItem.colorGrid(0, 1);\r\n            this.gridItem.colorGrid(1, 1);\r\n            this.gridItem.colorGrid(2, 1);\r\n            this.gridItem.colorGrid(1, 2);\r\n        }\r\n        return this.gridItem\r\n    }\r\n\r\n    getBottomCoord(){\r\n        if(this.numRotate % 4 == 0){\r\n            this.bottomCoord = [[0, 2], [1, 3]]\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.bottomCoord = [[0,2], [1, 2], [2, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.bottomCoord = [[1, 3], [2, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.bottomCoord = [[0, 2], [1,3], [2, 2]]\r\n        }\r\n        return this.bottomCoord\r\n    }\r\n    \r\n    getLeftCoord(){\r\n        if(this.numRotate % 4 == 0){\r\n            this.leftCoord = [[0, 0], [-1, 1], [0, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.leftCoord = [[0, 0], [-1, 1]]\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.leftCoord = [[0, 0], [0, 1], [0, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.leftCoord = [[0, 2], [-1, 1]]\r\n        }\r\n        return this.leftCoord\r\n    }\r\n\r\n    getRightCoord(){\r\n        if(this.numRotate % 4 == 0){\r\n            this.rightCoord = [[2, 0], [2, 1], [2, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 1){\r\n            this.rightCoord = [[2, 0], [3, 1]]\r\n        }\r\n        else if(this.numRotate % 4 == 2){\r\n            this.rightCoord = [[2, 0], [3, 1], [2, 2]]\r\n        }\r\n        else if(this.numRotate % 4 == 3){\r\n            this.rightCoord = [[2, 2], [3, 1]]\r\n        }\r\n        return this.rightCoord\r\n    }\r\n}\r\n\r\nmodule.exports = {iBrick, zBrick, lBrick, tBrick}\r\n\r\n// const Grid = require(\"./grid\");\r\n\r\n// class Brick{\r\n//     grid = new Grid();\r\n//     rotateState = 0; // 代表方块旋转的状态, 只有四种: 0, 1, 2, 3\r\n//     constructor(){\r\n        \r\n//     }\r\n\r\n//     getGridWidth() {\r\n//         return this.grid.width;\r\n//     }\r\n\r\n//     getGridHeight() {\r\n//         return this.grid.height;\r\n//     }\r\n\r\n//     getGridTiles(){\r\n//         return this.grid.getTiles();\r\n//     }\r\n\r\n//     getGridTile(x, y) {\r\n//         const tiles = this.grid.getTiles();\r\n//         return tiles[y * this.grid.width + x];\r\n//     }\r\n\r\n//     setRotateState() {\r\n\r\n//     }\r\n\r\n//     getRotateState() {\r\n//         return this.rotateState;\r\n//     }\r\n// }\r\n\r\n// class ABrick extends Brick{\r\n//     constructor(){\r\n//         super();\r\n//     }\r\n//     setRotateState(state){\r\n//         this.grid.clear();\r\n//         this.rotateState = state;\r\n//         if(state == 0){\r\n//             this.grid.setTileFill(1, 0, true);\r\n//             this.grid.setTileFill(0, 1, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(2, 1, true);\r\n//         }else if(state == 1){\r\n//             this.grid.setTileFill(1, 0, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(1, 2, true);\r\n//             this.grid.setTileFill(2, 1, true);\r\n//         }else if(state == 2){\r\n//             this.grid.setTileFill(0, 1, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(2, 1, true);\r\n//             this.grid.setTileFill(1, 2, true);\r\n//         }else if(state == 3){\r\n//             this.grid.setTileFill(1, 0, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(1, 2, true);\r\n//             this.grid.setTileFill(0, 1, true);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// class LBrick extends Brick{\r\n//     constructor(){\r\n//         super();\r\n//     }\r\n\r\n//     setRotateState(state){\r\n//         this.grid.clear();\r\n//         this.rotateState = state;\r\n//         if(state == 0){\r\n//             this.grid.setTileFill(0, 0, true);\r\n//             this.grid.setTileFill(0, 1, true);\r\n//             this.grid.setTileFill(0, 2, true);\r\n//             this.grid.setTileFill(1, 2, true);\r\n//         }else if(state == 1){\r\n//             this.grid.setTileFill(0, 0, true);\r\n//             this.grid.setTileFill(1, 0, true);\r\n//             this.grid.setTileFill(2, 0, true);\r\n//             this.grid.setTileFill(0, 1, true);\r\n//         }else if(state == 2){\r\n//             this.grid.setTileFill(0, 0, true);\r\n//             this.grid.setTileFill(1, 0, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(1, 2, true);\r\n//         }else if(state == 3){\r\n//             this.grid.setTileFill(2, 0, true);\r\n//             this.grid.setTileFill(0, 1, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(2, 1, true);\r\n//         }\r\n//     }\r\n// }\r\n\r\n// class ZBrick extends Brick{\r\n//     constructor(){\r\n//         super();\r\n//     }\r\n\r\n//     setRotateState(state){\r\n//         this.grid.clear();\r\n//         this.rotateState = state;\r\n//         if(state == 0 || state == 2){\r\n//             this.grid.setTileFill(0, 0, true);\r\n//             this.grid.setTileFill(0, 1, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(1, 2, true);    \r\n//         }else if(state == 1 || state == 3){\r\n//             this.grid.setTileFill(1, 0, true);\r\n//             this.grid.setTileFill(2, 0, true);\r\n//             this.grid.setTileFill(0, 1, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//         }\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// class IBrick extends Brick{\r\n//     constructor(){\r\n//         super();\r\n//     }\r\n//     setRotateState(state) {\r\n//         this.grid.clear();\r\n//         this.rotateState = state;\r\n//         if(state == 0 || state == 2){\r\n//             this.grid.setTileFill(1, 0, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(1, 2, true);\r\n//             this.grid.setTileFill(1, 3, true);    \r\n//         }else if(state == 1 || state == 3){\r\n//             this.grid.setTileFill(0, 1, true);\r\n//             this.grid.setTileFill(1, 1, true);\r\n//             this.grid.setTileFill(2, 1, true);\r\n//             this.grid.setTileFill(3, 1, true);    \r\n//         }\r\n//     }\r\n// }\r\n\r\n\r\n// class OBrick extends Brick{\r\n//     constructor(){\r\n//         super();\r\n//     }\r\n//     setRotateState(state) {\r\n//         this.grid.clear();\r\n//         this.rotateState = state;\r\n//         this.grid.setTileFill(0, 0, true);\r\n//         this.grid.setTileFill(0, 1, true);\r\n//         this.grid.setTileFill(1, 0, true);\r\n//         this.grid.setTileFill(1, 1, true);    \r\n//     }\r\n// }\r\n// module.exports = { ABrick, LBrick, ZBrick, IBrick, OBrick }\r\n\n\n//# sourceURL=webpack://my-webpack-project/./src/brick.js?");

/***/ }),

/***/ "./src/grid.js":
/*!*********************!*\
  !*** ./src/grid.js ***!
  \*********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const Tile = __webpack_require__(/*! ./tile */ \"./src/tile.js\")\r\nclass grid{\r\n    gridArray = []; \r\n    constructor(){\r\n        for(let i = 0; i < 4; i++){\r\n            let row = [];\r\n            for(let j = 0; j < 4; j++){\r\n                row.push(new Tile());\r\n            };\r\n            this.gridArray.push(row);\r\n        }\r\n    }\r\n    getArray(){\r\n        return this.gridArray;\r\n    }\r\n\r\n    colorGrid(i, j){\r\n        this.gridArray[i][j].setColor(1);\r\n    }\r\n\r\n    getTile(x, y){\r\n        return this.gridArray[x][y]\r\n    }\r\n\r\n    resetColor(){\r\n        for(let i = 0; i < 4; i++){\r\n            for(let j = 0; j < 4; j++){\r\n                this.gridArray[i][j].setColor(0)\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n}\r\nmodule.exports = grid;\r\n\r\n// const Tile = require(\"./tile\");\r\n\r\n// class Grid{\r\n//     tiles = [] // Tile[]\r\n//     width = 4;\r\n//     height = 4;\r\n\r\n//     constructor(){\r\n//         this._initTiles();\r\n//     }\r\n\r\n//     _initTiles(){\r\n//         this.tiles = [];\r\n//         for(let y=0;y<this.height;y++){\r\n//             for(let x=0;x<this.width;x++){\r\n//                 const tile = new Tile(x, y);\r\n//                 this.tiles.push(tile);\r\n//             }\r\n//         }\r\n//     }\r\n\r\n//     clear() {\r\n//         this._initTiles();\r\n//     }\r\n\r\n//     setTileFill(x, y, fill){\r\n//         const index = y * this.width + x;\r\n//         const tile = this.tiles[index];\r\n//         tile.setFill(fill);\r\n//     }\r\n\r\n//     getTiles() {\r\n//         return this.tiles;\r\n//     }\r\n\r\n//     getWidth() {\r\n//         return this.width;\r\n//     }\r\n\r\n//     getHeight() {\r\n//         return this.width;\r\n//     }\r\n\r\n// }\r\n\r\n// module.exports = Grid;\n\n//# sourceURL=webpack://my-webpack-project/./src/grid.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const World = __webpack_require__(/*! ./world */ \"./src/world.js\")\n\nfunction setUpCanvas(){\n    const myCanvas = document.getElementById(\"canvas\");\n    const ctx = myCanvas.getContext(\"2d\")\n    return ctx\n}\n\nconst ctx = setUpCanvas()\nconst world = new World(ctx)\nworld.generateBrick()\nworld.draw()\n// while (true){\ndocument.addEventListener(\"keyup\", (event)=>{\n    if(event.key == \"ArrowUp\"){\n        // console.log(\"up\")\n        world.rotateBrick()\n        \n    }\n    else if(event.key == \"ArrowLeft\"){\n        // console.log(\"left\")\n        world.moveLeft()\n    }\n    else if(event.key == \"ArrowRight\"){\n        // console.log(\"right\")\n        world.moveRight()\n    }\n    world.draw()\n})\nwindow.setInterval(()=>{\n    world.dropBrick()\n    world.draw()\n}, 800)\n\n// }\n\n\n\n// const lb = new tBrick();\n// document.addEventListener(\"keyup\", (event)=>{\n//     if(event.key == \"ArrowUp\"){\n//         rotateBrick(lb)\n//     }\n// })\n// window.setInterval(()=>{\n//     drawBrick(ctx, lb);\n// }, 500)\n\n\n\n// const { ABrick, LBrick, ZBrick, IBrick, OBrick } = require(\"./brick\");\n\n// function drawBrick(ctx, brick){\n//     const BRICK_WIDTH = 50;\n\n//     for(let y=0;y<brick.getGridHeight();y++){\n//         for(let x=0;x<brick.getGridWidth();x++){\n//             const tile = brick.getGridTile(x, y);\n//             if(tile.isFill()){\n//                 ctx.fillStyle = \"#000000\"\n//             }else{\n//                 ctx.fillStyle = \"#FFFFFF\"\n//             }\n\n//             ctx.fillRect(x * BRICK_WIDTH, y * BRICK_WIDTH, BRICK_WIDTH, BRICK_WIDTH);\n//         }\n//     }\n// }\n\n// function bootstrap(){\n//     const canvas = document.getElementById(\"canvas\");\n//     const ctx = canvas.getContext(\"2d\");\n//     const brick = new ABrick();\n    \n//     document.addEventListener(\"keyup\", (event)=>{\n//         if(event.key == \"ArrowUp\"){\n            \n//             brick.setRotateState((brick.getRotateState() + 1) % 4);\n//             drawBrick(ctx, brick);\n//         }\n//     })\n// }\n\n// bootstrap();\n\n//# sourceURL=webpack://my-webpack-project/./src/index.js?");

/***/ }),

/***/ "./src/tile.js":
/*!*********************!*\
  !*** ./src/tile.js ***!
  \*********************/
/***/ ((module) => {

eval("class Tile{\r\n    color;\r\n    x\r\n    y\r\n    constructor(){\r\n        this.color = 0;\r\n    }\r\n\r\n    setX(x){\r\n        this.x = x\r\n    }\r\n\r\n    setY(y){\r\n        this.y = y\r\n    }\r\n\r\n    getX(){\r\n        return this.x\r\n    }\r\n\r\n    getY(){\r\n        return this.y\r\n    }\r\n\r\n    setColor(c){\r\n        this.color = c;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n\r\n    isFill(){\r\n        if(this.color == 0){\r\n            return false\r\n        }\r\n        else{\r\n            return true\r\n        }\r\n    }\r\n}\r\n\r\nmodule.exports = Tile;\r\n\r\n// class Tile{\r\n//     gridX\r\n//     gridY\r\n//     fill = false;\r\n//     constructor(gridX, gridY){\r\n//         this.gridX = gridX;\r\n//         this.gridY = gridY;\r\n//     }\r\n\r\n//     isFill(){\r\n//         return this.fill;\r\n//     }\r\n    \r\n//     getGridX() {\r\n//         return this.gridX;\r\n//     }\r\n\r\n//     getGridY() {\r\n//         return this.gridY;\r\n//     }\r\n\r\n//     setFill(fill) {\r\n//         this.fill = fill;\r\n//     }\r\n\r\n// }\r\n\r\n// module.exports = Tile;\r\n\n\n//# sourceURL=webpack://my-webpack-project/./src/tile.js?");

/***/ }),

/***/ "./src/world.js":
/*!**********************!*\
  !*** ./src/world.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {iBrick, zBrick, lBrick, tBrick} = __webpack_require__(/*! ./brick */ \"./src/brick.js\")\r\nconst BRICKWIDTH = 25\r\nfunction drawBrick(ctx, brick){\r\n    // console.log(\"draw brick\")\r\n    const BRICKWIDTH = 25\r\n    for(let x = 0; x < 4; x++){\r\n        for(let y = 0; y < 4; y++){\r\n            const tile = brick.getGridItem().getTile(x, y)\r\n            if(tile.isFill()){\r\n                ctx.fillStyle = \"#000000\"\r\n            }\r\n            else{\r\n                ctx.fillStyle = \"#ffffff\"\r\n            }\r\n            ctx.fillRect((brick.getX() + x) * BRICKWIDTH, (brick.getY() + y) * BRICKWIDTH, BRICKWIDTH, BRICKWIDTH)\r\n        }\r\n    }\r\n    \r\n}\r\n\r\nclass World{\r\n    maxLeft = 0\r\n    maxRight = 15\r\n    maxHeight\r\n    brick\r\n    allBrick\r\n    allTiles\r\n    ctx\r\n    constructor(ctx){\r\n        this.allBrick = []\r\n        this.ctx = ctx\r\n        this.maxHeight = 15\r\n        this.allTiles = []\r\n    }\r\n\r\n    moveLeft(){\r\n        if (!this.touchLeft()){\r\n            this.brick.moveX(-1)\r\n        }\r\n        \r\n    }\r\n\r\n\r\n    moveRight(){\r\n        if (!this.touchRight()){\r\n            this.brick.moveX(1)\r\n        }\r\n    }\r\n\r\n    touchLeft(){\r\n        for (const left of this.brick.getLeftCoord()){\r\n            const coordX = this.brick.getX() + left[0]\r\n            const coordY = this.brick.getY() + left[1]\r\n            if(coordX < this.maxLeft){\r\n                return true\r\n            }\r\n            for(const tile of this.allTiles){\r\n                // coordX <= tile.getX()+1 \r\n                if ((coordX == tile.getX() && coordY == tile.getY())){\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    touchRight(){\r\n        for (const right of this.brick.getRightCoord()){\r\n            const coordX = this.brick.getX() + right[0]\r\n            const coordY = this.brick.getY() + right[1]\r\n            // coordX >= this.maxRight\r\n            if(coordX >= this.maxRight){\r\n                // console.log(\"maxRight\")\r\n                return true\r\n            }\r\n            for(const tile of this.allTiles){\r\n                // coordX >= tile.getX()\r\n                if (coordX == tile.getX() && coordY == tile.getY()){\r\n                    // console.log(\"touch right tile\")\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    resetWorld(){\r\n        this.allBrick = []\r\n        this.allTiles = []\r\n    }\r\n\r\n    updateWorld(){\r\n        \r\n    }\r\n\r\n    generateBrick(){\r\n        const allBricks = [iBrick, zBrick, lBrick, tBrick]\r\n        const index = Math.floor(Math.random() * 4)\r\n        const selectedBrick = allBricks[index]\r\n        this.brick = new selectedBrick()\r\n        this.allBrick.push(this.brick)\r\n    }\r\n\r\n    rotateBrick(){\r\n        this.brick.setNumRotate(this.brick.getNumRotate() + 1)\r\n    }\r\n\r\n    draw(){\r\n        this.ctx.clearRect(0,0,800,700);\r\n        drawBrick(this.ctx, this.brick)\r\n        this.drawAllBrick()\r\n    }\r\n\r\n    dropBrick(){\r\n        if(this.touchBottom()){\r\n            let tiles = this.brick.getGridItem().getArray()\r\n            // console.log(\"tile: \", tiles)\r\n            for(let i = 0; i < 4; i++){\r\n                for(let j = 0; j < 4; j++){\r\n                    if(tiles[i][j].isFill()){\r\n                        // console.log(\"tile:\", i, j)\r\n                        let t = tiles[i][j]\r\n                        t.setX((this.brick.getX() + i))\r\n                        t.setY((this.brick.getY() + j))\r\n                    \r\n                        this.allTiles.push(t)\r\n                    }\r\n                }\r\n            }\r\n            this.checkLine()\r\n            this.generateBrick()\r\n        }\r\n        this.brick.moveY(1)\r\n    }\r\n\r\n    checkLine(){\r\n        \r\n    }\r\n\r\n    touchBottom(){\r\n        // console.log(\"t\", this.brick.getY())\r\n        for(const tile of this.brick.getBottomCoord()){\r\n            const bottom = this.brick.getY() + tile[1]\r\n            if(bottom > 15){\r\n                console.log(\"over 15\")\r\n                return true\r\n            }\r\n        }\r\n        if (this.touchHistoryTiles()){\r\n            return true\r\n        }\r\n        \r\n        return false\r\n    }\r\n\r\n    touchHistoryTiles(){\r\n        for(const tile of this.allTiles){\r\n            const tileX = tile.getX()\r\n            const tileY = tile.getY()\r\n            for (const bottomTile of this.brick.getBottomCoord()){\r\n                const coordX = (this.brick.getX() + bottomTile[0])\r\n                const coordY = (this.brick.getY() + bottomTile[1])\r\n                if(tileX == coordX && coordY == tileY){\r\n                    console.log(\"touch history tile - tileX:\", tileX, \"coordX:\", coordX, \"tileY:\", tileY, \"coordY:\", coordY )\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n\r\n    drawAllBrick(){\r\n        for(const tile of this.allTiles){\r\n            if(tile.isFill()){\r\n                this.ctx.fillStyle = \"#000000\"\r\n            }\r\n            else{\r\n                this.ctx.fillStyle = \"#ffffff\"\r\n            }\r\n            this.ctx.fillRect(tile.getX() * BRICKWIDTH, tile.getY() * BRICKWIDTH, BRICKWIDTH, BRICKWIDTH)\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\nmodule.exports = World\n\n//# sourceURL=webpack://my-webpack-project/./src/world.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;